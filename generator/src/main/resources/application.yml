server:
  port: 8081

mybatis-plus:
  mapper-locations:
    - classpath:mappers/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
  type-aliases-package: com.much.it.entity

spring:
  application:
    name: generator
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/much?characterEncoding=utf8&allowMulitQueries=ture&useSSL=false&serverTimezone=UTC
    username: ENC(D+yPsj5l/Lke7U7egn8BnQ==)
    password: ENC(D+yPsj5l/Lke7U7egn8BnQ==)

  shardingsphere:
    datasource:
      names: much
      much:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/much?characterEncoding=utf8&allowMulitQueries=ture&useSSL=false&serverTimezone=UTC
        username: ENC(D+yPsj5l/Lke7U7egn8BnQ==)
        password: ENC(D+yPsj5l/Lke7U7egn8BnQ==)
        filter:
          stat:
            log-slow-sql: true
            slow-sql-millis: 1000
            merge-sql: true
          wall:
            config:
              multi-statement-allow: true
#    encrypt:
#      encryptors:
#        encryptor_aes:
#          type: aes
#          props:
#            aes.key.value: Psj5lLke7U9n8BnQ
    sharding:
      encrypt-rule:
        encryptors:
          aes_encryptor:
            type: aes
            props:
              aes.key.value: Psj5lLke7U9n8BnQ
      tables:
        com_city:
          columns:
            code:
              cipherColumn: code
              encryptor: aes_encryptor
              plainColumn: code_aes
            name:
              cipherColumn: name
              encryptor: aes_encryptor
              plainColumn: name_aes
            name_py:
              cipherCoulumn: mane_py
              encryptor: aes_encryptor
              plainColumn: mane_py_aes
            ON_LINE:
              cipherCoulumn: ON_LINE
              encryptor: aes_encryptor
              plainColumn: ON_LINE_aes
            HOT_EXTENT:
              cipherCoulumn: HOT_EXTENT
              encryptor: aes_encryptor
              plainColumn: HOT_EXTENT_aes
            YY_AUTH_COUNT:
              cipherCoulumn: YY_AUTH_COUNT
              encryptor: aes_encryptor
              plainColumn: YY_AUTH_COUNT_aes
            LASTUPDATE_DATE:
              cipherCoulumn: LASTUPDATE_DATE
              encryptor: aes_encryptor
              plainColumn: LASTUPDATE_DATE_aes
            CREATE_DATE:
              cipherCoulumn: CREATE_DATE
              encryptor: aes_encryptor
              plainColumn: CREATE_DATE_aes
    props:
      sql:
        show: true
      query:
        with:
          cipher:
            column: true



jasypt:
  encryptor:
    password: Y5kScmS3D9mWQ

#  Psj5lLke7U9n8BnQ
#  SELECT to_base64(AES_ENCRYPT("wenxin","Psj5lLke7U9n8BnQ"));
#  SELECT AES_DECRYPT(from_base64('THvPQR9ygFzdhSrdA1XxSw=='),'Psj5lLke7U9n8BnQ');
rsa:
  encrypt:
    open: true
    showLog: true
    publicKey: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALUKxjhG3Fb1ytD9a5J4LrRTS4XrZQRwHzD/Jw4NTQGUTdz1OUjZVo1sS/90ZOjgYDHHRNRY/s1PmkCGfHu8CkUCAwEAAQ==
    privateKey: MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAtQrGOEbcVvXK0P1rkngutFNLhetlBHAfMP8nDg1NAZRN3PU5SNlWjWxL/3Rk6OBgMcdE1Fj+zU+aQIZ8e7wKRQIDAQABAkAgy7LcvvlrR1tWQJIcFmlfgTdNKzdBdo4v8gjBIuewQT5u73OXGsDWLzBZh5qtCvbptWSm4kEwJjAoLNmfUkiBAiEA+vYLbiaV3AXSTg17MYwLoS8fetJnsTJtCWQ9Ufj+IncCIQC4rVd0DJA+0ngKLX1AByVk3HBG+5VbAjrh+VTblc5MIwIhAN5iDTrsojs4RWW4+IOtT9jjAwg5Tn1s68Y4t0XeWIR9AiBpGXVIvRGmPv9Dw4mhU6/LS8y2CN2B8q3yBoRthz7lgwIhAK2UH7++KJjg6KZJpj5WUAG9vnvLxiFAhjVIJM3yMo+E
